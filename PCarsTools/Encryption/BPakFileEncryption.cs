using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;

using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Parameters;

using System.IO;
using System.Runtime.Intrinsics.X86;

namespace PCarsTools.Encryption
{
	public class BPakFileEncryption
	{
		private static byte[][] _currentKeys;

		static BPakFileEncryption()
		{
			_currentKeys = _keys_PC1; // Default to these keys
        }

		public static void SetKeyset(KeysetType keysetType)
		{
			_currentKeys = keysetType switch
			{
				KeysetType.TDFRL => _keys_TDFRL,
				KeysetType.PC1 => _keys_PC1,
				KeysetType.PC2AndAbove => _keys_PC2AndAbove,
				_ => throw new ArgumentException("Invalid keyset type")
			};
		}

        public static void DecryptData(eEncryptionType encryptionType, byte[] data, int len, int keyIndex)
		{
			if (encryptionType == eEncryptionType.RC4)
				DecryptRC4(data, keyIndex);
			else if (encryptionType == eEncryptionType.TwoFish)
				DecryptTwoFish(data, keyIndex);
			else if (encryptionType == eEncryptionType.None)
			{
				throw new Exception("Tried to decrypt using eEncryptionType.None");
			}
			else
			{
				throw new Exception("Unknown encryption");
			}
		}

		public static CryptoStream CreateDecryptionStream(eEncryptionType encryptionType, Stream input, int keyIndex)
		{
			if (encryptionType == eEncryptionType.RC4)
				return CreateRC4Stream(input, keyIndex);
			else if (encryptionType == eEncryptionType.TwoFish)
				throw new Exception("TwoFish stream creation is not yet implemented.");
			else if (encryptionType == eEncryptionType.None)
			{
				throw new Exception("Tried to decrypt using eEncryptionType.None");
			}
			else
			{
				throw new Exception("Unknown encryption");
			}
		}


		public static void DecryptTwoFish(byte[] data, int keyIndex)
		{
			var key = GetEncKey(keyIndex);
			DecryptTwoFish(data, key);
		}

		public static void DecryptTwoFish(byte[] data, Span<byte> key)
		{
			var tmpKey = key.ToArray();

			DecryptKey(tmpKey);

			TwofishEngine eng = new TwofishEngine();
			eng.Init(false, new KeyParameter(tmpKey));

			int bSize = eng.GetBlockSize();
			for (int j = 0; j < data.Length / bSize; j++)
			{
				int offset = j * bSize;
				eng.ProcessBlock(data, offset, data, offset);
			}
		}

		private static void DecryptRC4(Span<byte> data, int keyIndex)
		{
			var key = GetEncKey(keyIndex); // Get a copy

			DecryptKey(key);

			RC4.Crypt(key, data, data, data.Length);
		}

		private static CryptoStream CreateRC4Stream(Stream input, int keyIndex)
		{
			var key = GetEncKey(keyIndex);

			DecryptKey(key);

			return new CryptoStream(input, new RC4CryptoTransform(key), CryptoStreamMode.Read);
		}

		private static void DecryptKey(Span<byte> key)
		{
			Span<byte> xor = new byte[] { 0xAC, 0xC7, 0x91 };
			int tIndex = 0;

			int i;
			// 2 by 2
			for (i = 0; i + 1 < key.Length; i += 2)
			{
				byte tmp1 = (byte)(xor[tIndex++] ^ key[i]);
				tIndex = Utils.ClampWrap(tIndex, 0, 2);

				byte tmp2 = (byte)(xor[tIndex++] ^ key[i + 1]);
				tIndex = Utils.ClampWrap(tIndex, 0, 2);

				// Reversed
				key[i] = tmp2;
				key[i + 1] = tmp1;
			}

			// Remains
			for (; i < key.Length; i++)
			{
				tIndex = Utils.ClampWrap(tIndex, 0, 2);
				key[i] ^= xor[tIndex++];
			}
		}

		private static Span<byte> GetEncKey(int index)
		{
			var key = _currentKeys[index];
			for (int i = 0; i < key.Length; i++)
			{
				if (key[i] == 0)
					return key.AsSpan(0, i);
			}

			throw new Exception("Impossible");
		}

		private readonly static byte[][] _keys_TDFRL = new byte[/*32*/][/*27*/]
		{
			new byte[] { 0x87, 0xAF, 0xA2, 0x84, 0xAF, 0xB0, 0xC1, 0x8D, 0xE5, 0xDA, 0xEF, 0xEF, 0x95, 0x97, 0xEF, 0xEB, 0x82, 0xA5, 0xCB, 0xF1, 0xBD, 0xF2, 0x00, 0x53, 0x30, 0x4B, 0x00, },
			new byte[] { 0x8D, 0x89, 0xA8, 0xCE, 0xA4, 0xEB, 0xC7, 0xA6, 0xC7, 0xE9, 0xA2, 0xC4, 0xDB, 0xB7, 0xB2, 0xF9, 0xF0, 0xFD, 0xD1, 0xAA, 0x00, 0x39, 0x45, 0x51, 0x2B, 0x3F, 0x00, },
			new byte[] { 0x9D, 0x91, 0xC2, 0xE2, 0xFF, 0xFA, 0x82, 0xBD, 0xFE, 0xC6, 0x84, 0xF8, 0xD7, 0xAF, 0xAE, 0xEA, 0x8E, 0xD7, 0xC5, 0xAD, 0xFB, 0xE4, 0x00, 0x39, 0x61, 0x70, 0x00, },
			new byte[] { 0xCE, 0xEE, 0xE6, 0xE6, 0xA1, 0xE1, 0xCD, 0xE4, 0xA7, 0xD0, 0x8B, 0xDB, 0x86, 0xA2, 0xD0, 0x82, 0x97, 0xDA, 0x9D, 0xAF, 0xF4, 0x00, 0x38, 0x65, 0x32, 0x72, 0x00, },
			new byte[] { 0xC8, 0xBA, 0xE8, 0xC9, 0x80, 0xBB, 0xC0, 0xB7, 0xC4, 0xE2, 0xA5, 0xA5, 0x87, 0xF3, 0xEC, 0x81, 0x94, 0xCB, 0x00, 0x41, 0x2B, 0x65, 0x70, 0x65, 0x74, 0x3F, 0x00, },
			new byte[] { 0x95, 0xF6, 0xE0, 0xC8, 0xBF, 0xD0, 0xC5, 0xBD, 0xCC, 0xD4, 0xB0, 0xD0, 0xD1, 0x88, 0xFC, 0xEB, 0x8A, 0xA0, 0x8D, 0x80, 0xCF, 0x00, 0x50, 0x41, 0x2A, 0x75, 0x00, },
			new byte[] { 0xC8, 0xFA, 0xCF, 0xFE, 0x89, 0xE6, 0x86, 0x85, 0xF6, 0x80, 0xAD, 0xE9, 0xF9, 0x96, 0xFF, 0xFF, 0xB5, 0xDF, 0xFC, 0xB6, 0xC4, 0xEE, 0xF5, 0x00, 0x45, 0x53, 0x00, },
			new byte[] { 0xEF, 0xAE, 0xE1, 0xF2, 0xFA, 0xA7, 0xF6, 0xA4, 0xA9, 0xC3, 0xB9, 0xCF, 0xCF, 0xBF, 0xE3, 0xC0, 0x00, 0x68, 0x75, 0x57, 0x52, 0x75, 0x6B, 0x45, 0x64, 0x72, 0x00, },
			new byte[] { 0xDE, 0xFD, 0xFA, 0x9B, 0xBC, 0xFA, 0xCA, 0x90, 0xF8, 0x80, 0x83, 0xD9, 0xFA, 0xA1, 0xA1, 0x94, 0x95, 0xC1, 0xFE, 0xFF, 0xAC, 0xE7, 0x8D, 0x00, 0x52, 0x65, 0x00, },
			new byte[] { 0x99, 0x83, 0xC8, 0xF5, 0xFC, 0xBB, 0x9B, 0xE4, 0xCB, 0x99, 0x97, 0xEB, 0xFF, 0x84, 0xCB, 0xD4, 0x00, 0x40, 0x75, 0x73, 0x50, 0x61, 0x2D, 0x2D, 0x61, 0x66, 0x00, },
			new byte[] { 0xCA, 0xB3, 0xD2, 0xD1, 0xB2, 0xAC, 0x9A, 0xF1, 0xC6, 0xF2, 0xA0, 0xFF, 0xCB, 0x88, 0xBC, 0xC4, 0x9F, 0xFC, 0xC9, 0xBC, 0xBC, 0xE3, 0x90, 0x00, 0x2A, 0x33, 0x00, },
			new byte[] { 0xFA, 0xB9, 0xE6, 0x8D, 0xB2, 0xE7, 0x99, 0xEF, 0xDC, 0xDC, 0xAE, 0xC9, 0xCA, 0xF6, 0xB0, 0xCD, 0x00, 0x61, 0x6E, 0x65, 0x6D, 0x61, 0x74, 0x68, 0x65, 0x3F, 0x00, },
			new byte[] { 0x99, 0xBE, 0xB0, 0xCA, 0x8C, 0xA3, 0xE3, 0xF0, 0xE5, 0x95, 0xF2, 0xD5, 0x97, 0xF8, 0xBC, 0xF7, 0x9F, 0xA2, 0x00, 0x76, 0x65, 0x34, 0x55, 0x70, 0x2B, 0x73, 0x00, },
			new byte[] { 0xD2, 0xA3, 0xC9, 0x94, 0xE3, 0xF9, 0xE5, 0xA7, 0xD4, 0xF6, 0xEC, 0xB8, 0xEB, 0xA6, 0xA3, 0xED, 0xBC, 0x00, 0x42, 0x72, 0x45, 0x5A, 0x65, 0x6A, 0x61, 0x77, 0x00, },
			new byte[] { 0x81, 0x86, 0xF1, 0x98, 0xA9, 0xFD, 0xC3, 0xFC, 0xB9, 0x96, 0x8E, 0xC6, 0x85, 0xA1, 0xEA, 0xC0, 0xA6, 0xFD, 0x85, 0xAD, 0xFC, 0x00, 0x65, 0x64, 0x72, 0x65, 0x00, },
			new byte[] { 0xDD, 0xFA, 0xC0, 0x93, 0xE9, 0xF2, 0xDB, 0xAE, 0xA6, 0xCA, 0x8E, 0xB2, 0xC5, 0xE4, 0xF5, 0xEC, 0xFA, 0xBD, 0x00, 0x54, 0x61, 0x23, 0x55, 0x70, 0x23, 0x53, 0x00, },
			new byte[] { 0x87, 0x92, 0xC4, 0x8D, 0x92, 0xFA, 0x8D, 0x90, 0xE0, 0xE6, 0xF6, 0xA0, 0xC0, 0x96, 0xC3, 0x98, 0xF6, 0xD2, 0xCC, 0x00, 0x61, 0x6D, 0x61, 0x73, 0x74, 0x61, 0x00, },
			new byte[] { 0x94, 0x96, 0xC7, 0x80, 0xA2, 0xA3, 0x9E, 0x8E, 0xD0, 0xC4, 0xAD, 0xE0, 0xD1, 0xA5, 0xF0, 0xEE, 0xF8, 0xF7, 0x97, 0x00, 0x38, 0x40, 0x79, 0x75, 0x77, 0x65, 0x00, },
			new byte[] { 0xE1, 0xAB, 0xAC, 0xE8, 0x99, 0xC0, 0xC0, 0x8C, 0xC5, 0xF7, 0x86, 0xBA, 0xFD, 0x83, 0xA1, 0x87, 0xA5, 0xD9, 0xF5, 0xFC, 0xD7, 0x00, 0x63, 0x68, 0x24, 0x26, 0x00, },

			// Identical starting here
			new byte[] { 0x6A, 0x65, 0x74, 0x72, 0x61, 0x63, 0x52, 0x2D, 0x2D, 0x61, 0x63, 0x72, 0x5F, 0x74, 0x2D, 0x74, 0x72, 0x2A, 0x37, 0x2A, 0x64, 0x61, 0x64, 0x72, 0x61, 0x62, 0x00, },
			new byte[] { 0x6A, 0x40, 0x79, 0x75, 0x74, 0x72, 0x61, 0x6E, 0x65, 0x6D, 0x75, 0x77, 0x65, 0x63, 0x65, 0x39, 0x41, 0x7A, 0x61, 0x74, 0x72, 0x61, 0x3F, 0x77, 0x61, 0x2A, 0x00, },
			new byte[] { 0x70, 0x55, 0x70, 0x68, 0x65, 0x2D, 0x61, 0x70, 0x72, 0x75, 0x3D, 0x55, 0x57, 0x72, 0x61, 0x42, 0x52, 0x75, 0x37, 0x40, 0x53, 0x57, 0x2D, 0x78, 0x61, 0x23, 0x00, },
			new byte[] { 0x64, 0x2B, 0x21, 0x75, 0x67, 0x61, 0x70, 0x48, 0x3D, 0x73, 0x74, 0x65, 0x70, 0x68, 0x61, 0x63, 0x55, 0x63, 0x68, 0x75, 0x63, 0x72, 0x65, 0x73, 0x55, 0x43, 0x00, },
			new byte[] { 0x77, 0x65, 0x24, 0x72, 0x38, 0x74, 0x72, 0x75, 0x53, 0x70, 0x61, 0x54, 0x37, 0x61, 0x54, 0x37, 0x45, 0x64, 0x61, 0x73, 0x77, 0x37, 0x73, 0x50, 0x61, 0x70, 0x00, },
			new byte[] { 0x2B, 0x68, 0x35, 0x40, 0x75, 0x37, 0x21, 0x61, 0x37, 0x68, 0x39, 0x77, 0x38, 0x61, 0x43, 0x61, 0x71, 0x65, 0x79, 0x61, 0x26, 0x72, 0x75, 0x74, 0x61, 0x63, 0x00, },
			new byte[] { 0x50, 0x72, 0x45, 0x74, 0x68, 0x41, 0x6B, 0x24, 0x6B, 0x65, 0x35, 0x52, 0x61, 0x78, 0x75, 0x64, 0x72, 0x45, 0x4B, 0x75, 0x6E, 0x41, 0x56, 0x61, 0x62, 0x45, 0x00, },
			new byte[] { 0x71, 0x75, 0x77, 0x61, 0x3F, 0x37, 0x40, 0x74, 0x65, 0x77, 0x38, 0x65, 0x72, 0x61, 0x21, 0x45, 0x63, 0x52, 0x45, 0x40, 0x75, 0x66, 0x2B, 0x46, 0x52, 0x75, 0x00, },
			new byte[] { 0x6A, 0x2A, 0x71, 0x61, 0x62, 0x61, 0x71, 0x75, 0x23, 0x37, 0x75, 0x66, 0x72, 0x37, 0x79, 0x3D, 0x74, 0x72, 0x55, 0x62, 0x21, 0x50, 0x40, 0x61, 0x66, 0x65, 0x00, },
			new byte[] { 0x42, 0x35, 0x75, 0x33, 0x41, 0x53, 0x36, 0x65, 0x51, 0x55, 0x77, 0x72, 0x75, 0x59, 0x26, 0x3F, 0x21, 0x75, 0x2D, 0x72, 0x41, 0x34, 0x2A, 0x74, 0x65, 0x36, 0x00, },
			new byte[] { 0x73, 0x50, 0x45, 0x33, 0x32, 0x75, 0x32, 0x61, 0x53, 0x21, 0x65, 0x7A, 0x45, 0x79, 0x61, 0x6B, 0x61, 0x77, 0x75, 0x4B, 0x45, 0x37, 0x75, 0x68, 0x65, 0x73, 0x00, },
			new byte[] { 0x66, 0x72, 0x32, 0x42, 0x61, 0x50, 0x75, 0x6A, 0x75, 0x77, 0x65, 0x6B, 0x61, 0x73, 0x61, 0x24, 0x65, 0x35, 0x61, 0x70, 0x2A, 0x74, 0x65, 0x32, 0x61, 0x78, 0x00, },
			new byte[] { 0x74, 0x75, 0x74, 0x68, 0x36, 0x26, 0x72, 0x3D, 0x73, 0x77, 0x65, 0x78, 0x65, 0x36, 0x75, 0x43, 0x65, 0x64, 0x61, 0x62, 0x72, 0x23, 0x76, 0x65, 0x66, 0x61, 0x00  },
		};

        private readonly static byte[][] _keys_PC1 = new byte[/*32*/][/*27*/]
        {
			new byte[] { 0xE3, 0xF4, 0xD1, 0xD5, 0xEB, 0xCC, 0xCF, 0xBC, 0xA1, 0xCD, 0xEB, 0xF9, 0xF7, 0xEB, 0xEC, 0xC3, 0x9C, 0xE4, 0xDD, 0x94, 0xB5, 0xCB, 0xE6, 0xE6, 0x00, 0x4B, 0x00 },
			new byte[] { 0x9F, 0xFD, 0xE2, 0x80, 0x81, 0xE3, 0xEA, 0x81, 0xD5, 0x9D, 0xE2, 0xF3, 0xD2, 0xB9, 0xFC, 0xF3, 0xF7, 0xC8, 0xDE, 0x8D, 0x00, 0x39, 0x45, 0x51, 0x2B, 0x3F, 0x00 },
			new byte[] { 0x86, 0xAD, 0xA9, 0xC4, 0x80, 0xE4, 0x94, 0xBF, 0xE5, 0xE1, 0xE6, 0xE1, 0x8D, 0xA4, 0xF2, 0xF6, 0xF3, 0x00, 0x70, 0x3D, 0x41, 0x6D, 0x75, 0x39, 0x61, 0x70, 0x00 },
			new byte[] { 0xFE, 0xA9, 0xE7, 0xD1, 0x84, 0xC1, 0xE6, 0xFA, 0xBB, 0xD2, 0xF4, 0xBC, 0x8F, 0x97, 0xE0, 0x8F, 0x81, 0xD2, 0x00, 0x39, 0x5F, 0x75, 0x38, 0x65, 0x32, 0x72, 0x00 },
			new byte[] { 0xCF, 0xA4, 0xD4, 0xE6, 0xFF, 0xC7, 0xC4, 0xFA, 0xDE, 0xCC, 0xA0, 0xA2, 0xE5, 0x8F, 0xB4, 0x84, 0x8C, 0xDA, 0xFC, 0xE9, 0xDC, 0xF3, 0xB1, 0xFB, 0xD8, 0xBC, 0x00 },
			new byte[] { 0xE4, 0xBB, 0xDD, 0xF4, 0x9E, 0xA5, 0xD8, 0xB1, 0xE1, 0x86, 0x97, 0xC4, 0xFC, 0xF1, 0xD0, 0xFF, 0xB9, 0xF1, 0xC6, 0xAF, 0xDF, 0x9E, 0x83, 0x00, 0x2A, 0x75, 0x00 },
			new byte[] { 0x95, 0xB9, 0xD0, 0x96, 0xB7, 0xAF, 0xD2, 0x92, 0xFF, 0xE5, 0x88, 0xED, 0xEB, 0xA6, 0xD2, 0x8B, 0xED, 0xFD, 0xE2, 0x8B, 0xDB, 0xCB, 0x88, 0xB5, 0x00, 0x53, 0x00 },
			new byte[] { 0xF4, 0xFD, 0xE0, 0xE4, 0x87, 0xF7, 0x80, 0xF6, 0xCB, 0x81, 0xE6, 0xC8, 0xEF, 0xF8, 0xCA, 0x88, 0xA6, 0xB0, 0x9F, 0x00, 0x52, 0x75, 0x6B, 0x45, 0x64, 0x72, 0x00 },
			new byte[] { 0x80, 0xA6, 0xD0, 0x82, 0x82, 0xAB, 0xD7, 0xA2, 0xF6, 0xE2, 0x95, 0xBD, 0xEA, 0xA0, 0xCC, 0xE8, 0xB0, 0xB5, 0xDD, 0xAA, 0x00, 0x75, 0x21, 0x65, 0x52, 0x65, 0x00 },
			new byte[] { 0xE5, 0xE4, 0xEA, 0x92, 0x89, 0xF9, 0xDB, 0xA4, 0xFC, 0xCA, 0xA5, 0xA1, 0xF6, 0x93, 0xA6, 0xDC, 0xBE, 0xBB, 0x9B, 0xAC, 0xF2, 0xCE, 0x00, 0x2D, 0x61, 0x66, 0x00 },
			new byte[] { 0xDC, 0xFD, 0xFA, 0xFE, 0x84, 0xAE, 0xD9, 0xEB, 0xC8, 0xD1, 0xBF, 0xD6, 0x8B, 0xF0, 0xFD, 0xED, 0xE4, 0xD7, 0xF2, 0xAB, 0xC8, 0xD8, 0xBD, 0xF0, 0x00, 0x33, 0x00 },
			new byte[] { 0xD5, 0x81, 0xA5, 0x9B, 0xFA, 0xA8, 0xF7, 0xFC, 0xDE, 0xF3, 0x91, 0xC5, 0xF5, 0x95, 0xC5, 0xFB, 0xFE, 0xCC, 0xEC, 0x93, 0x00, 0x61, 0x74, 0x68, 0x65, 0x3F, 0x00 },
			new byte[] { 0x99, 0xBF, 0xFD, 0xD4, 0xAF, 0xD0, 0x80, 0xBD, 0xB6, 0x8F, 0xFE, 0xF3, 0xF8, 0x91, 0xB8, 0x8B, 0xB7, 0xC3, 0x8F, 0x94, 0xAB, 0xE8, 0x00, 0x70, 0x2B, 0x73, 0x00 },
			new byte[] { 0xE1, 0xA3, 0xE2, 0x94, 0xB7, 0xD6, 0xFF, 0xA9, 0xD1, 0xE2, 0x8D, 0xD2, 0xE6, 0x93, 0xA7, 0xC5, 0x88, 0xDE, 0x89, 0xEC, 0xBF, 0x00, 0x65, 0x6A, 0x61, 0x77, 0x00 },
			new byte[] { 0xDA, 0xFA, 0xEF, 0xC9, 0xE4, 0xD2, 0x8F, 0xF3, 0xC5, 0x93, 0xB2, 0xF8, 0x9F, 0xFD, 0xF4, 0xE7, 0xB9, 0xA7, 0x88, 0xBE, 0xF6, 0xC5, 0xF3, 0xFE, 0xC4, 0x00, 0x00 },
			new byte[] { 0xE4, 0x81, 0xBC, 0xD7, 0x90, 0xF5, 0xE4, 0xB7, 0xCC, 0xCE, 0xBB, 0xAA, 0xF7, 0x94, 0xE4, 0xDE, 0x91, 0xF6, 0xE5, 0xEF, 0xA7, 0xE8, 0xEF, 0xAB, 0x00, 0x53, 0x00 },
			new byte[] { 0xE1, 0xF4, 0xC9, 0xEF, 0x97, 0xC6, 0xF9, 0x91, 0xA0, 0xF1, 0xF6, 0xD0, 0xCE, 0xAA, 0xEB, 0x8D, 0xBE, 0xC4, 0x99, 0xB7, 0xFD, 0x97, 0xFA, 0xC6, 0x97, 0x00, 0x00 },
			new byte[] { 0xCA, 0xB9, 0xB4, 0x9D, 0x99, 0xCE, 0xE8, 0x95, 0xAE, 0xC2, 0xE3, 0xD3, 0xD8, 0x88, 0xF4, 0xF9, 0x8C, 0xA2, 0xD0, 0xFA, 0xD0, 0xD6, 0x00, 0x75, 0x77, 0x65, 0x00 },

			// Identical to PC2+ starting from here
			new byte[] { 0x39, 0x54, 0x45, 0x58, 0x55, 0x2B, 0x75, 0x23, 0x55, 0x2A, 0x68, 0x2B, 0x44, 0x3D, 0x65, 0x66, 0x55, 0x63, 0x52, 0x75, 0x64, 0x61, 0x63, 0x68, 0x24, 0x26, 0x00 },
			new byte[] { 0x6A, 0x65, 0x74, 0x72, 0x61, 0x63, 0x52, 0x2D, 0x2D, 0x61, 0x63, 0x72, 0x5F, 0x74, 0x2D, 0x74, 0x72, 0x2A, 0x37, 0x2A, 0x64, 0x61, 0x64, 0x72, 0x61, 0x62, 0x00 },
			new byte[] { 0x6A, 0x40, 0x79, 0x75, 0x74, 0x72, 0x61, 0x6E, 0x65, 0x6D, 0x75, 0x77, 0x65, 0x63, 0x65, 0x39, 0x41, 0x7A, 0x61, 0x74, 0x72, 0x61, 0x3F, 0x77, 0x61, 0x2A, 0x00 },
			new byte[] { 0x70, 0x55, 0x70, 0x68, 0x65, 0x2D, 0x61, 0x70, 0x72, 0x75, 0x3D, 0x55, 0x57, 0x72, 0x61, 0x42, 0x52, 0x75, 0x37, 0x40, 0x53, 0x57, 0x2D, 0x78, 0x61, 0x23, 0x00 },
			new byte[] { 0x64, 0x2B, 0x21, 0x75, 0x67, 0x61, 0x70, 0x48, 0x3D, 0x73, 0x74, 0x65, 0x70, 0x68, 0x61, 0x63, 0x55, 0x63, 0x68, 0x75, 0x63, 0x72, 0x65, 0x73, 0x55, 0x43, 0x00 },
			new byte[] { 0x77, 0x65, 0x24, 0x72, 0x38, 0x74, 0x72, 0x75, 0x53, 0x70, 0x61, 0x54, 0x37, 0x61, 0x54, 0x37, 0x45, 0x64, 0x61, 0x73, 0x77, 0x37, 0x73, 0x50, 0x61, 0x70, 0x00 },
			new byte[] { 0x2B, 0x68, 0x35, 0x40, 0x75, 0x37, 0x21, 0x61, 0x37, 0x68, 0x39, 0x77, 0x38, 0x61, 0x43, 0x61, 0x71, 0x65, 0x79, 0x61, 0x26, 0x72, 0x75, 0x74, 0x61, 0x63, 0x00 },
			new byte[] { 0x50, 0x72, 0x45, 0x74, 0x68, 0x41, 0x6B, 0x24, 0x6B, 0x65, 0x35, 0x52, 0x61, 0x78, 0x75, 0x64, 0x72, 0x45, 0x4B, 0x75, 0x6E, 0x41, 0x56, 0x61, 0x62, 0x45, 0x00 },
			new byte[] { 0x71, 0x75, 0x77, 0x61, 0x3F, 0x37, 0x40, 0x74, 0x65, 0x77, 0x38, 0x65, 0x72, 0x61, 0x21, 0x45, 0x63, 0x52, 0x45, 0x40, 0x75, 0x66, 0x2B, 0x46, 0x52, 0x75, 0x00 },
			new byte[] { 0x6A, 0x2A, 0x71, 0x61, 0x62, 0x61, 0x71, 0x75, 0x23, 0x37, 0x75, 0x66, 0x72, 0x37, 0x79, 0x3D, 0x74, 0x72, 0x55, 0x62, 0x21, 0x50, 0x40, 0x61, 0x66, 0x65, 0x00 },
			new byte[] { 0x42, 0x35, 0x75, 0x33, 0x41, 0x53, 0x36, 0x65, 0x51, 0x55, 0x77, 0x72, 0x75, 0x59, 0x26, 0x3F, 0x21, 0x75, 0x2D, 0x72, 0x41, 0x34, 0x2A, 0x74, 0x65, 0x36, 0x00 },
			new byte[] { 0x73, 0x50, 0x45, 0x33, 0x32, 0x75, 0x32, 0x61, 0x53, 0x21, 0x65, 0x7A, 0x45, 0x79, 0x61, 0x6B, 0x61, 0x77, 0x75, 0x4B, 0x45, 0x37, 0x75, 0x68, 0x65, 0x73, 0x00 },
			new byte[] { 0x66, 0x72, 0x32, 0x42, 0x61, 0x50, 0x75, 0x6A, 0x75, 0x77, 0x65, 0x6B, 0x61, 0x73, 0x61, 0x24, 0x65, 0x35, 0x61, 0x70, 0x2A, 0x74, 0x65, 0x32, 0x61, 0x78, 0x00 },
			new byte[] { 0x74, 0x75, 0x74, 0x68, 0x36, 0x26, 0x72, 0x3D, 0x73, 0x77, 0x65, 0x78, 0x65, 0x36, 0x75, 0x43, 0x65, 0x64, 0x61, 0x62, 0x72, 0x23, 0x76, 0x65, 0x66, 0x61, 0x00 },
        };

        private readonly static byte[][] _keys_PC2AndAbove = new byte[/*32*/][/*27*/]
		{
			new byte[] { 0x99, 0x89, 0xCB, 0xF7, 0x9F, 0xB8, 0xF2, 0x83, 0xEA, 0xDB, 0xB2, 0xA0, 0xCE, 0x98, 0xAE, 0xF1, 0x87, 0xA3, 0xF8, 0x8F, 0xA5, 0xED, 0x00, 0x53, 0x30, 0x4B, 0x00, }, // Default - Index 0
			new byte[] { 0xCE, 0x91, 0xA5, 0xF9, 0xE6, 0xD9, 0xF6, 0x80, 0xC8, 0xCA, 0xA3, 0xC7, 0xED, 0x9F, 0xBA, 0xF5, 0xEF, 0xA7, 0xD9, 0xAA, 0xA5, 0xFF, 0x00, 0x51, 0x2B, 0x3F, 0x00, },
			new byte[] { 0xE2, 0xB1, 0xF0, 0xDA, 0xAE, 0xA7, 0x8D, 0x8A, 0xFB, 0xEF, 0x83, 0xA2, 0xCE, 0x90, 0xF7, 0xFA, 0x88, 0xA1, 0xED, 0x8C, 0xE7, 0x9C, 0x00, 0x39, 0x61, 0x70, 0x00, },
			new byte[] { 0xEE, 0xF2, 0xA6, 0xD7, 0x92, 0xDF, 0xD2, 0x82, 0xC0, 0x85, 0xA2, 0xBC, 0x94, 0xEC, 0xB4, 0xFA, 0x86, 0xD9, 0x98, 0xF5, 0xF8, 0x86, 0x00, 0x65, 0x32, 0x72, 0x00, },
			new byte[] { 0xC8, 0x88, 0xF4, 0xCF, 0xBF, 0xE3, 0xD8, 0x96, 0xDB, 0xFD, 0xA5, 0xD8, 0xC3, 0xBF, 0xD3, 0xE0, 0x91, 0xDA, 0xDC, 0xF0, 0xF4, 0xFC, 0x00, 0x65, 0x74, 0x3F, 0x00, },
			new byte[] { 0xEB, 0xA3, 0xDE, 0xCA, 0x84, 0xF8, 0xCA, 0xA3, 0xA3, 0xFF, 0xAB, 0xDC, 0xFA, 0x8F, 0xEB, 0xF9, 0xBD, 0xE8, 0xE4, 0xA4, 0xF4, 0xE5, 0x00, 0x41, 0x2A, 0x75, 0x00, },
			new byte[] { 0xC6, 0x97, 0xA7, 0xDE, 0xA5, 0xBB, 0x8F, 0xF1, 0xAE, 0x86, 0xB0, 0xE0, 0xE0, 0xBC, 0xEB, 0xDD, 0xF8, 0xDE, 0xE4, 0xF6, 0xB5, 0xFF, 0x00, 0x35, 0x45, 0x53, 0x00, },
			new byte[] { 0xC7, 0x82, 0xE4, 0xC7, 0xF5, 0xF6, 0xDB, 0x84, 0xF9, 0xED, 0x96, 0xC8, 0x9E, 0x8D, 0xE7, 0xC4, 0xB7, 0xFF, 0xDF, 0x81, 0xA0, 0xEE, 0x00, 0x45, 0x64, 0x72, 0x00, },
			new byte[] { 0xD9, 0x9D, 0xC5, 0xCB, 0xBD, 0xFA, 0xE3, 0xAC, 0xC6, 0xF4, 0x9E, 0xFE, 0xDA, 0x93, 0xC9, 0xDD, 0x83, 0xE1, 0xE6, 0x8B, 0xFF, 0xD8, 0x00, 0x65, 0x52, 0x65, 0x00, },
			new byte[] { 0xFE, 0xF2, 0xD7, 0xE4, 0x82, 0xD9, 0x95, 0x95, 0xA6, 0xEB, 0xA2, 0xA3, 0xEB, 0x96, 0xFA, 0xC0, 0xAF, 0xE9, 0xE1, 0x81, 0xFF, 0xC0, 0x00, 0x2D, 0x61, 0x66, 0x00, },
			new byte[] { 0xC4, 0xF7, 0xD5, 0xDB, 0xF6, 0xCB, 0xDF, 0xE3, 0xE8, 0x84, 0x9D, 0xC1, 0xD8, 0x9A, 0xD3, 0xEC, 0x83, 0xDD, 0xFA, 0x8D, 0xA9, 0xDD, 0x00, 0x66, 0x2A, 0x33, 0x00, },
			new byte[] { 0xF6, 0xBA, 0xF2, 0x82, 0xAB, 0xBA, 0x89, 0xAC, 0xFB, 0x9F, 0xFF, 0xC8, 0x98, 0xB7, 0xD2, 0xFD, 0x98, 0xA1, 0xCC, 0xF5, 0xA7, 0xD4, 0x00, 0x68, 0x65, 0x3F, 0x00, },
			new byte[] { 0xED, 0xF3, 0xC3, 0xC1, 0x8B, 0xE8, 0xC0, 0xF3, 0xDB, 0xE6, 0x85, 0xF2, 0xDF, 0x91, 0xE3, 0x9B, 0xB1, 0xA7, 0xE3, 0xAD, 0xC6, 0xDA, 0x00, 0x70, 0x2B, 0x73, 0x00, },
			new byte[] { 0xE7, 0x90, 0xE6, 0x94, 0x9F, 0xC0, 0xDD, 0x95, 0xE1, 0xFB, 0xB0, 0xC2, 0xF5, 0x80, 0xD2, 0xF6, 0xBF, 0xC2, 0xE5, 0xBF, 0xFE, 0xDA, 0x00, 0x6A, 0x61, 0x77, 0x00, },
			new byte[] { 0xF4, 0xBE, 0xFB, 0x8F, 0x8F, 0xFA, 0xC9, 0x83, 0xCC, 0xD8, 0xF8, 0xE5, 0x9F, 0xED, 0xDC, 0xFF, 0xAE, 0xFF, 0x9A, 0x8B, 0xB0, 0x94, 0x00, 0x64, 0x72, 0x65, 0x00, },
			new byte[] { 0xD4, 0xFE, 0xC0, 0x87, 0xBF, 0xA1, 0x87, 0xA0, 0xA7, 0xDA, 0xE9, 0xA8, 0xD0, 0xA1, 0xBC, 0xCE, 0x8C, 0xC1, 0x9E, 0x83, 0xD5, 0xC7, 0x00, 0x70, 0x23, 0x53, 0x00, },
			new byte[] { 0xC7, 0x81, 0xAE, 0xD0, 0x95, 0xFC, 0x9D, 0x9C, 0xD5, 0xFD, 0x8C, 0xF7, 0x84, 0xF1, 0xB5, 0xDE, 0xED, 0xBC, 0xF1, 0xBE, 0xF3, 0xD7, 0x00, 0x73, 0x74, 0x61, 0x00, },
			new byte[] { 0xFA, 0x82, 0xFE, 0xC6, 0x81, 0xA7, 0xD7, 0x81, 0xC0, 0x9A, 0xB7, 0xF5, 0xDB, 0x9C, 0xCE, 0xD0, 0xA1, 0xBD, 0xE7, 0xA7, 0xB5, 0xFA, 0x00, 0x75, 0x77, 0x65, 0x00, },
			new byte[] { 0x39, 0x54, 0x45, 0x58, 0x55, 0x2B, 0x75, 0x23, 0x55, 0x2A, 0x68, 0x2B, 0x44, 0x3D, 0x65, 0x66, 0x55, 0x63, 0x52, 0x75, 0x64, 0x61, 0x63, 0x68, 0x24, 0x26, 0x00, },
			new byte[] { 0x6A, 0x65, 0x74, 0x72, 0x61, 0x63, 0x52, 0x2D, 0x2D, 0x61, 0x63, 0x72, 0x5F, 0x74, 0x2D, 0x74, 0x72, 0x2A, 0x37, 0x2A, 0x64, 0x61, 0x64, 0x72, 0x61, 0x62, 0x00, },
			new byte[] { 0x6A, 0x40, 0x79, 0x75, 0x74, 0x72, 0x61, 0x6E, 0x65, 0x6D, 0x75, 0x77, 0x65, 0x63, 0x65, 0x39, 0x41, 0x7A, 0x61, 0x74, 0x72, 0x61, 0x3F, 0x77, 0x61, 0x2A, 0x00, },
			new byte[] { 0x70, 0x55, 0x70, 0x68, 0x65, 0x2D, 0x61, 0x70, 0x72, 0x75, 0x3D, 0x55, 0x57, 0x72, 0x61, 0x42, 0x52, 0x75, 0x37, 0x40, 0x53, 0x57, 0x2D, 0x78, 0x61, 0x23, 0x00, },
			new byte[] { 0x64, 0x2B, 0x21, 0x75, 0x67, 0x61, 0x70, 0x48, 0x3D, 0x73, 0x74, 0x65, 0x70, 0x68, 0x61, 0x63, 0x55, 0x63, 0x68, 0x75, 0x63, 0x72, 0x65, 0x73, 0x55, 0x43, 0x00, },
			new byte[] { 0x77, 0x65, 0x24, 0x72, 0x38, 0x74, 0x72, 0x75, 0x53, 0x70, 0x61, 0x54, 0x37, 0x61, 0x54, 0x37, 0x45, 0x64, 0x61, 0x73, 0x77, 0x37, 0x73, 0x50, 0x61, 0x70, 0x00, },
			new byte[] { 0x2B, 0x68, 0x35, 0x40, 0x75, 0x37, 0x21, 0x61, 0x37, 0x68, 0x39, 0x77, 0x38, 0x61, 0x43, 0x61, 0x71, 0x65, 0x79, 0x61, 0x26, 0x72, 0x75, 0x74, 0x61, 0x63, 0x00, },
			new byte[] { 0x50, 0x72, 0x45, 0x74, 0x68, 0x41, 0x6B, 0x24, 0x6B, 0x65, 0x35, 0x52, 0x61, 0x78, 0x75, 0x64, 0x72, 0x45, 0x4B, 0x75, 0x6E, 0x41, 0x56, 0x61, 0x62, 0x45, 0x00, },
			new byte[] { 0x71, 0x75, 0x77, 0x61, 0x3F, 0x37, 0x40, 0x74, 0x65, 0x77, 0x38, 0x65, 0x72, 0x61, 0x21, 0x45, 0x63, 0x52, 0x45, 0x40, 0x75, 0x66, 0x2B, 0x46, 0x52, 0x75, 0x00, },
			new byte[] { 0x6A, 0x2A, 0x71, 0x61, 0x62, 0x61, 0x71, 0x75, 0x23, 0x37, 0x75, 0x66, 0x72, 0x37, 0x79, 0x3D, 0x74, 0x72, 0x55, 0x62, 0x21, 0x50, 0x40, 0x61, 0x66, 0x65, 0x00, },
			new byte[] { 0x42, 0x35, 0x75, 0x33, 0x41, 0x53, 0x36, 0x65, 0x51, 0x55, 0x77, 0x72, 0x75, 0x59, 0x26, 0x3F, 0x21, 0x75, 0x2D, 0x72, 0x41, 0x34, 0x2A, 0x74, 0x65, 0x36, 0x00, },
			new byte[] { 0x73, 0x50, 0x45, 0x33, 0x32, 0x75, 0x32, 0x61, 0x53, 0x21, 0x65, 0x7A, 0x45, 0x79, 0x61, 0x6B, 0x61, 0x77, 0x75, 0x4B, 0x45, 0x37, 0x75, 0x68, 0x65, 0x73, 0x00, },
			new byte[] { 0x66, 0x72, 0x32, 0x42, 0x61, 0x50, 0x75, 0x6A, 0x75, 0x77, 0x65, 0x6B, 0x61, 0x73, 0x61, 0x24, 0x65, 0x35, 0x61, 0x70, 0x2A, 0x74, 0x65, 0x32, 0x61, 0x78, 0x00, },
			new byte[] { 0x74, 0x75, 0x74, 0x68, 0x36, 0x26, 0x72, 0x3D, 0x73, 0x77, 0x65, 0x78, 0x65, 0x36, 0x75, 0x43, 0x65, 0x64, 0x61, 0x62, 0x72, 0x23, 0x76, 0x65, 0x66, 0x61, 0x00, }
		};
    }

	public enum KeysetType
	{
        TDFRL,
        PC1,
		PC2AndAbove,
	}

	public enum eEncryptionType
	{
		None,
		TwoFish = 1,
		RC4 = 2,

	}
}

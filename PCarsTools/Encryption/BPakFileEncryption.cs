using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;

using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Parameters;

using System.IO;

namespace PCarsTools.Encryption
{
    public class BPakFileEncryption
    {
		public static void DecryptData(eEncryptionType encryptionType, byte[] data, int len, int keyIndex)
        {
			if (encryptionType == eEncryptionType.RC4)
				DecryptRC4(data, keyIndex);
			else if (encryptionType == eEncryptionType.TwoFish)
				DecryptTwoFish(data, keyIndex);
			else if (encryptionType == eEncryptionType.None)
            {
				throw new Exception("Tried to decrypt using eEncryptionType.None");
            }
			else
            {
				throw new Exception("Unknown encryption");
            }
        }

		public static CryptoStream CreateDecryptionStream(eEncryptionType encryptionType, Stream input, int keyIndex)
		{
			if (encryptionType == eEncryptionType.RC4)
				return CreateRC4Stream(input, keyIndex);
			else if (encryptionType == eEncryptionType.TwoFish)
				throw new Exception("TwoFish stream creation is not yet implemented.");
			else if (encryptionType == eEncryptionType.None)
			{
				throw new Exception("Tried to decrypt using eEncryptionType.None");
			}
			else
			{
				throw new Exception("Unknown encryption");
			}
		}


		public static void DecryptTwoFish(byte[] data, int keyIndex)
		{
			var key = GetEncKey(keyIndex);
			DecryptTwoFish(data, key);
		}

		public static void DecryptTwoFish(byte[] data, Span<byte> key)
        {
			var tmpKey = key.ToArray();

			DecryptKey(tmpKey);

			TwofishEngine eng = new TwofishEngine();
			eng.Init(false, new KeyParameter(tmpKey));

			int bSize = eng.GetBlockSize();
			for (int j = 0; j < data.Length / bSize; j++)
            {
				int offset = j * bSize;
				eng.ProcessBlock(data, offset, data, offset);
			}
		}

		private static void DecryptRC4(Span<byte> data, int keyIndex)
        {
            var key = GetEncKey(keyIndex); // Get a copy

            DecryptKey(key);

            RC4.Crypt(key, data, data, data.Length);
        }

		private static CryptoStream CreateRC4Stream(Stream input, int keyIndex)
        {
			var key = GetEncKey(keyIndex);

			DecryptKey(key);

			return new CryptoStream(input, new RC4CryptoTransform(key), CryptoStreamMode.Read);
        }

        private static void DecryptKey(Span<byte> key)
        {
            Span<byte> xor = new byte[] { 0xAC, 0xC7, 0x91 };
            int tIndex = 0;

            int i;
            // 2 by 2
            for (i = 0; i + 1 < key.Length; i += 2)
            {
                byte tmp1 = (byte)(xor[tIndex++] ^ key[i]);
                tIndex = Utils.ClampWrap(tIndex, 0, 2);

                byte tmp2 = (byte)(xor[tIndex++] ^ key[i + 1]);
                tIndex = Utils.ClampWrap(tIndex, 0, 2);

                // Reversed
                key[i] = tmp2;
                key[i + 1] = tmp1;
            }

            // Remains
            for (; i < key.Length; i++)
            {
                Math.Clamp(tIndex, 0, 2);
                tIndex++;
                key[i] ^= xor[tIndex];
            }
        }

        private static Span<byte> GetEncKey(int index)
		{
			var key = _keys[index];
			for (int i = 0; i < key.Length; i++)
			{
				if (key[i] == 0)
					return key.ToArray().AsSpan(0, i);
			}

			throw new Exception("Impossible");
		}

		private static byte[][] _keys = new byte[][]
		{
			new byte[] { 0x99,0x89,0xCB,0xF7,0x9F,0xB8,0xF2,0x83,0xEA,0xDB,0xB2,0xA0,0xCE,0x98,0xAE,0xF1,0x87,0xA3,0xF8,0x8F,0xA5,0xED,0x00,0x53,0x30,0x4B,0x00 }, // Default - Index 0
			new byte[] { 0xCE,0x91,0xA5,0xF9,0xE6,0xD9,0xF6,0x80,0xC8,0xCA,0xA3,0xC7,0xED,0x9F,0xBA,0xF5,0xEF,0xA7,0xD9,0xAA,0xA5,0xFF,0x00,0x51,0x2B,0x3F,0x00 },
			new byte[] { 0xE2,0xB1,0xF0,0xDA,0xAE,0xA7,0x8D,0x8A,0xFB,0xEF,0x83,0xA2,0xCE,0x90,0xF7,0xFA,0x88,0xA1,0xED,0x8C,0xE7,0x9C,0x00,0x39,0x61,0x70,0x00 },
			new byte[] { 0xEE,0xF2,0xA6,0xD7,0x92,0xDF,0xD2,0x82,0xC0,0x85,0xA2,0xBC,0x94,0xEC,0xB4,0xFA,0x86,0xD9,0x98,0xF5,0xF8,0x86,0x00,0x65,0x32,0x72,0x00 },
			new byte[] { 0xC8,0x88,0xF4,0xCF,0xBF,0xE3,0xD8,0x96,0xDB,0xFD,0xA5,0xD8,0xC3,0xBF,0xD3,0xE0,0x91,0xDA,0xDC,0xF0,0xF4,0xFC,0x00,0x65,0x74,0x3F,0x00 },
			new byte[] { 0x73,0x74,0x55,0x78,0x45,0x62,0x65,0x59,0x37,0x70,0x72,0x65,0x4A,0x21,0x43,0x52,0x61,0x4E,0x61,0x67,0x35,0x73,0x50,0x41,0x2A,0x75,0x00 },
			new byte[] { 0x35,0x74,0x75,0x68,0x3D,0x3F,0x45,0x71,0x61,0x7A,0x75,0x46,0x72,0x65,0x50,0x32,0x26,0x62,0x72,0x65,0x4A,0x65,0x73,0x35,0x45,0x53,0x00 },
			new byte[] { 0x77,0x72,0x23,0x78,0x75,0x48,0x40,0x23,0x61,0x32,0x2D,0x32,0x61,0x50,0x33,0x33,0x26,0x68,0x75,0x57,0x52,0x75,0x6B,0x45,0x64,0x72,0x00 },
			new byte[] { 0x63,0x72,0x2A,0x66,0x3D,0x75,0x2D,0x72,0x75,0x73,0x65,0x70,0x72,0x65,0x64,0x3F,0x61,0x37,0x65,0x66,0x3F,0x75,0x21,0x65,0x52,0x65,0x00 },
			new byte[] { 0x6A,0x75,0x6B,0x65,0x46,0x75,0x37,0x65,0x64,0x41,0x76,0x61,0x62,0x75,0x73,0x57,0x65,0x40,0x75,0x73,0x50,0x61,0x2D,0x2D,0x61,0x66,0x00 },
			new byte[] { 0x50,0x72,0x55,0x64,0x34,0x73,0x32,0x65,0x43,0x5F,0x41,0x59,0x75,0x66,0x61,0x6A,0x61,0x44,0x2A,0x75,0x74,0x2A,0x75,0x66,0x2A,0x33,0x00 },
			new byte[] { 0x70,0x68,0x75,0x6E,0x61,0x6A,0x65,0x74,0x72,0x65,0x23,0x61,0x73,0x23,0x24,0x75,0x26,0x61,0x6E,0x65,0x6D,0x61,0x74,0x68,0x65,0x3F,0x00 },
			new byte[] { 0x39,0x70,0x2A,0x51,0x41,0x38,0x5F,0x6B,0x41,0x38,0x2D,0x45,0x32,0x35,0x68,0x41,0x54,0x2B,0x55,0x76,0x65,0x34,0x55,0x70,0x2B,0x73,0x00 },
			new byte[] { 0x5F,0x55,0x70,0x55,0x70,0x65,0x54,0x32,0x61,0x44,0x72,0x3D,0x74,0x55,0x6A,0x41,0x79,0x55,0x42,0x72,0x45,0x5A,0x65,0x6A,0x61,0x77,0x00 },
			new byte[] { 0x6A,0x65,0x3F,0x72,0x23,0x68,0x45,0x74,0x75,0x74,0x68,0x75,0x24,0x72,0x75,0x79,0x23,0x53,0x57,0x65,0x70,0x52,0x65,0x64,0x72,0x65,0x00 },
			new byte[] { 0x36,0x50,0x45,0x6A,0x45,0x44,0x52,0x65,0x58,0x75,0x63,0x52,0x2A,0x70,0x65,0x77,0x65,0x64,0x65,0x54,0x61,0x23,0x55,0x70,0x23,0x53,0x00 },
			new byte[] { 0x36,0x65,0x73,0x74,0x65,0x62,0x52,0x39,0x70,0x72,0x65,0x33,0x36,0x72,0x75,0x5A,0x65,0x67,0x65,0x6A,0x61,0x6D,0x61,0x73,0x74,0x61,0x00 },
			new byte[] { 0x2A,0x32,0x65,0x7A,0x41,0x48,0x21,0x70,0x68,0x35,0x74,0x72,0x38,0x53,0x77,0x55,0x78,0x61,0x38,0x61,0x38,0x40,0x79,0x75,0x77,0x65,0x00 },
			new byte[] { 0x39,0x54,0x45,0x58,0x55,0x2B,0x75,0x23,0x55,0x2A,0x68,0x2B,0x44,0x3D,0x65,0x66,0x55,0x63,0x52,0x75,0x64,0x61,0x63,0x68,0x24,0x26,0x00 },
			new byte[] { 0x6A,0x65,0x74,0x72,0x61,0x63,0x52,0x2D,0x2D,0x61,0x63,0x72,0x5F,0x74,0x2D,0x74,0x72,0x2A,0x37,0x2A,0x64,0x61,0x64,0x72,0x61,0x62,0x00 },
			new byte[] { 0x6A,0x40,0x79,0x75,0x74,0x72,0x61,0x6E,0x65,0x6D,0x75,0x77,0x65,0x63,0x65,0x39,0x41,0x7A,0x61,0x74,0x72,0x61,0x3F,0x77,0x61,0x2A,0x00 },
			new byte[] { 0x70,0x55,0x70,0x68,0x65,0x2D,0x61,0x70,0x72,0x75,0x3D,0x55,0x57,0x72,0x61,0x42,0x52,0x75,0x37,0x40,0x53,0x57,0x2D,0x78,0x61,0x23,0x00 },
			new byte[] { 0x64,0x2B,0x21,0x75,0x67,0x61,0x70,0x48,0x3D,0x73,0x74,0x65,0x70,0x68,0x61,0x63,0x55,0x63,0x68,0x75,0x63,0x72,0x65,0x73,0x55,0x43,0x00 },
			new byte[] { 0x77,0x65,0x24,0x72,0x38,0x74,0x72,0x75,0x53,0x70,0x61,0x54,0x37,0x61,0x54,0x37,0x45,0x64,0x61,0x73,0x77,0x37,0x73,0x50,0x61,0x70,0x00 },
			new byte[] { 0x2B,0x68,0x35,0x40,0x75,0x37,0x21,0x61,0x37,0x68,0x39,0x77,0x38,0x61,0x43,0x61,0x71,0x65,0x79,0x61,0x26,0x72,0x75,0x74,0x61,0x63,0x00 },
			new byte[] { 0x50,0x72,0x45,0x74,0x68,0x41,0x6B,0x24,0x6B,0x65,0x35,0x52,0x61,0x78,0x75,0x64,0x72,0x45,0x4B,0x75,0x6E,0x41,0x56,0x61,0x62,0x45,0x00 },
			new byte[] { 0x71,0x75,0x77,0x61,0x3F,0x37,0x40,0x74,0x65,0x77,0x38,0x65,0x72,0x61,0x21,0x45,0x63,0x52,0x45,0x40,0x75,0x66,0x2B,0x46,0x52,0x75,0x00 },
			new byte[] { 0x6A,0x2A,0x71,0x61,0x62,0x61,0x71,0x75,0x23,0x37,0x75,0x66,0x72,0x37,0x79,0x3D,0x74,0x72,0x55,0x62,0x21,0x50,0x40,0x61,0x66,0x65,0x00 },
			new byte[] { 0x42,0x35,0x75,0x33,0x41,0x53,0x36,0x65,0x51,0x55,0x77,0x72,0x75,0x59,0x26,0x3F,0x21,0x75,0x2D,0x72,0x41,0x34,0x2A,0x74,0x65,0x36,0x00 },
			new byte[] { 0x73,0x50,0x45,0x33,0x32,0x75,0x32,0x61,0x53,0x21,0x65,0x7A,0x45,0x79,0x61,0x6B,0x61,0x77,0x75,0x4B,0x45,0x37,0x75,0x68,0x65,0x73,0x00 },
			new byte[] { 0x66,0x72,0x32,0x42,0x61,0x50,0x75,0x6A,0x75,0x77,0x65,0x6B,0x61,0x73,0x61,0x24,0x65,0x35,0x61,0x70,0x2A,0x74,0x65,0x32,0x61,0x78,0x00 },
			new byte[] { 0x74,0x75,0x74,0x68,0x36,0x26,0x72,0x3D,0x73,0x77,0x65,0x78,0x65,0x36,0x75,0x43,0x65,0x64,0x61,0x62,0x72,0x23,0x76,0x65,0x66,0x61,0x00 }
		};
	}

	public enum eEncryptionType
    {
		None,
		TwoFish = 1,
		RC4 = 2,
		
    }
}
